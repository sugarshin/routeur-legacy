// Generated by CoffeeScript 1.10.0

/*!
 * @license routeur-legacy
 * (c) sugarshin
 * License: MIT
 */

(function() {
  'use strict';
  var Routeur, arrayForeach, assign, extRegex, globToRegexp, indexRegex, isArray, isFunction, objectForEach, omit;

  globToRegexp = require('glob-to-regexp');

  assign = require('object-assign');

  omit = require('object.omit');

  extRegex = require('ext-regex');

  arrayForeach = require('array-foreach');

  isArray = require('isarray');

  objectForEach = require('./util/objectForEach');

  indexRegex = require('./util/indexRegex');

  isFunction = require('./util/isFunction');

  module.exports = Routeur = (function() {
    function Routeur(routes, config) {
      this.routes = routes != null ? routes : {};
      this.config = assign({
        rootPath: ''
      }, config);
    }

    Routeur.prototype.run = function(currentPathName) {
      if (currentPathName == null) {
        currentPathName = location.pathname || '';
      }
      return objectForEach(this.routes, (function(_this) {
        return function(actionOrActions, pathName) {
          var globPath, regexp;
          globPath = _this._getGlobPath(_this.config.rootPath, pathName);
          regexp = globToRegexp(globPath, {
            extended: true
          });
          if (regexp.test(currentPathName)) {
            if (isFunction(actionOrActions)) {
              return actionOrActions();
            } else if (isArray(actionOrActions)) {
              return arrayForeach(actionOrActions, function(action) {
                return action();
              });
            }
          }
        };
      })(this));
    };

    Routeur.prototype.configure = function(config) {
      this.config = assign({}, this.config, config);
      return this;
    };

    Routeur.prototype.addRoute = function(pathName, actionOrActions) {
      this.routes[pathName] = actionOrActions;
      return this;
    };

    Routeur.prototype.removeRoute = function(pathName) {
      this.routes = omit(this.routes, pathName);
      return this;
    };

    Routeur.prototype._getGlobPath = function(rootPath, pathName) {
      if (extRegex().test(pathName)) {
        return "" + rootPath + pathName;
      }
      if (indexRegex().test(pathName)) {
        return "" + rootPath + pathName + "{,index.html}";
      }
      return "" + rootPath + pathName + "{/,/index.html}";
    };

    return Routeur;

  })();

}).call(this);
