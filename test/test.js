// Generated by CoffeeScript 1.10.0
(function() {
  var Router, assert;

  assert = require('power-assert');

  Router = require('..');

  before(function(done) {
    global.location || (global.location = {});
    return done();
  });

  describe('Router', function() {
    describe('constructor', function() {
      return it('case1', function() {
        var router, routes;
        routes = {
          '/': function() {}
        };
        router = new Router(routes);
        assert(router instanceof Router);
        assert.deepEqual(router.routes, routes);
        return assert.deepEqual(router.config, {
          rootPath: ''
        });
      });
    });
    describe('configure', function() {
      return it('case1', function() {
        var config, router;
        config = {
          rootPath: '/path/to'
        };
        router = new Router();
        router.configure(config);
        return assert.deepEqual(router.config, config);
      });
    });
    describe('run', function() {
      it('case / => /index.html', function() {
        var expected, router, routes;
        global.location.pathname = '/index.html';
        expected = false;
        routes = {
          '/': function() {
            return expected = true;
          },
          '/page/': [
            function() {
              return expected = false;
            }, function() {
              return expected = false;
            }
          ],
          '/page.html': function() {
            return expected = false;
          }
        };
        router = new Router(routes);
        router.run();
        return assert(expected);
      });
      it('case / => /', function() {
        var expected, router, routes;
        global.location.pathname = '/';
        expected = false;
        routes = {
          '/': function() {
            return expected = true;
          },
          '/page/': [
            function() {
              return expected = false;
            }, function() {
              return expected = false;
            }
          ],
          '/page.html': function() {
            return expected = false;
          }
        };
        router = new Router(routes);
        router.run();
        return assert(expected);
      });
      it('case /page/', function() {
        var expected1, expected2, router, routes;
        global.location.pathname = '/page/';
        expected1 = false;
        expected2 = false;
        routes = {
          '/page/': [
            function() {
              return expected1 = true;
            }, function() {
              return expected2 = true;
            }
          ]
        };
        router = new Router(routes);
        router.run();
        return assert(expected1 && expected2);
      });
      it('case /page.html', function() {
        var expected, router, routes;
        global.location.pathname = '/page.html';
        expected = false;
        routes = {
          '/page.html': function() {
            return expected = true;
          }
        };
        router = new Router(routes);
        router.run();
        return assert(expected);
      });
      return it('case /path/to/page.html', function() {
        var expected, router, routes;
        global.location.pathname = '/path/to/page.html';
        expected = false;
        routes = {
          '/path/to/page.html': function() {
            return expected = true;
          }
        };
        router = new Router(routes);
        router.run();
        return assert(expected);
      });
    });
    describe('addRoute', function() {
      return it('case1', function() {
        var expected, router;
        global.location.pathname = '/';
        expected = false;
        router = new Router();
        router.addRoute('/', function() {
          return expected = true;
        });
        router.run();
        return assert(expected);
      });
    });
    return describe('removeRoute', function() {
      return it('case1', function() {
        var expected, router;
        global.location.pathname = '/';
        expected = true;
        router = new Router({
          '/': function() {
            return expected = false;
          }
        });
        router.removeRoute('/');
        router.run();
        return assert(expected);
      });
    });
  });

}).call(this);
